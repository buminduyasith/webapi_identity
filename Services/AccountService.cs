using System;
using webapi_identity.Repositories;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using webapi_identity.configuration;
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using webapi_identity.DTOs;

namespace webapi_identity.Services
{
    public class AccountService : IAccountRepository
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger _logger;
        private readonly JwtConfig _jwtConfig;

        private readonly TokenValidationParameters _tokenValidationParameters;

        public AccountService(UserManager<IdentityUser> userManager, IOptionsMonitor<JwtConfig> optionsMonitor,
        ILoggerFactory logger, TokenValidationParameters tokenValidationParameters,)

        {
            _userManager = userManager;
            _jwtConfig = optionsMonitor.CurrentValue;
            _logger = logger.CreateLogger("weatherService");
            _tokenValidationParameters = tokenValidationParameters;
        }

        public async Task<Object> CreateUser(UserRegistrationRequestDto userRegisterDto)
        {


            var newUser = new IdentityUser() { Email = userRegisterDto.Email, UserName = userRegisterDto.Email };
            var isCreated = await _userManager.CreateAsync(newUser, userRegisterDto.Password);

            if (isCreated.Succeeded)
            {
                var jwtToken = GenerateJwtToken(newUser);
                return jwtToken;

            }
            else
            {
                return isCreated;
            }
        }

        public async Task<IdentityUser> FindByEmailAsync(string email)
        {
            var existingUser = await _userManager.FindByEmailAsync(email);

            return existingUser;
        }

        public string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(_jwtConfig.Secret);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddSeconds(30),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }

        public async Task<bool> UserLogin(IdentityUser identityUser, string password)
        {
            var isCorrect = await _userManager.CheckPasswordAsync(identityUser, password);
            return isCorrect;
        }


    }
}
